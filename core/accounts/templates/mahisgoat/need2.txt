my current folder and file structure is:"(base) PS C:\Users\Soumyajit\Downloads\per1> ls


    Directory: C:\Users\Soumyajit\Downloads\per1


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        25-05-2025     23:46                core
d-----        25-05-2025     08:40                venv


(base) PS C:\Users\Soumyajit\Downloads\per1> cd .\venv\
(base) PS C:\Users\Soumyajit\Downloads\per1\venv> dir


    Directory: C:\Users\Soumyajit\Downloads\per1\venv


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        25-05-2025     08:40                Include
d-----        25-05-2025     08:40                Lib
d-----        25-05-2025     11:58                Scripts
-a----        25-05-2025     08:40             92 pyvenv.cfg


(base) PS C:\Users\Soumyajit\Downloads\per1\venv> cd..
(base) PS C:\Users\Soumyajit\Downloads\per1> cd .\core\
(base) PS C:\Users\Soumyajit\Downloads\per1\core> dir


    Directory: C:\Users\Soumyajit\Downloads\per1\core


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        25-05-2025     11:56                accounts
d-----        25-05-2025     08:43                core
-a----        25-05-2025     23:46         200704 db.sqlite3
-a----        25-05-2025     08:43            682 manage.py


(base) PS C:\Users\Soumyajit\Downloads\per1\core> cd .\accounts\
(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts> dir


    Directory: C:\Users\Soumyajit\Downloads\per1\core\accounts


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        25-05-2025     22:59                migrations
d-----        25-05-2025     11:06                templates
d-----        26-05-2025     00:29                __pycache__
-a----        25-05-2025     23:12            646 admin.py
-a----        25-05-2025     08:43            154 apps.py
-a----        25-05-2025     21:59           8503 forms.py
-a----        25-05-2025     22:59           6538 models.py
-a----        25-05-2025     08:43             63 tests.py
-a----        26-05-2025     00:28          15687 views.py
-a----        25-05-2025     08:43              0 __init__.py


(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts> cd .\migrations\
(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\migrations> dir


    Directory: C:\Users\Soumyajit\Downloads\per1\core\accounts\migrations


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        25-05-2025     22:59                __pycache__
-a----        25-05-2025     12:02           1737 0001_initial.py
-a----        25-05-2025     12:41           2443 0002_charialdailyexpensesotherexpensesname_and_more.py 
-a----        25-05-2025     15:51           1265 0003_alter_charialbillpartyname_partyname_and_more.py  
-a----        25-05-2025     22:02           2043 0004_charialtradeseller_charialtrade.py
-a----        25-05-2025     22:59            765 0005_charialtrade_new_pending_and_more.py
-a----        25-05-2025     08:43              0 __init__.py


(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\migrations> cd..
(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts> cd .\templates\
(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\templates> dir


    Directory: C:\Users\Soumyajit\Downloads\per1\core\accounts\templates


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        25-05-2025     10:42                charial
d-----        01-06-2025     09:24                mahisgoat
d-----        25-05-2025     09:02                registration
-a----        25-05-2025     15:48           2968 base.html
-a----        25-05-2025     11:30            453 dashboard.html
-a----        25-05-2025     11:30            281 home.html


(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\templates> cd .\charial\
(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial> dir


    Directory: C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        25-05-2025     10:47            253 balance_sheet.html
-a----        25-05-2025     15:46           6633 bill.html
-a----        25-05-2025     15:51           5996 daily_expenses.html
-a----        25-05-2025     10:43            570 main.html
-a----        26-05-2025     00:30           5041 trade.html


(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial> cd..
(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\templates> cd .\mahisgoat\
(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat> dir


    Directory: C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        25-05-2025     10:47            257 balance_sheet.html
-a----        25-05-2025     10:47            257 bill.html
-a----        25-05-2025     10:47            257 daily_expenses.html
-a----        25-05-2025     10:45            586 main.html
-a----        01-06-2025     09:24          50005 need.txt
-a----        01-06-2025     09:24              0 need2.txt
-a----        25-05-2025     10:47            257 trade.html


(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat> cd..
(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\templates> cd .\registration\
(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\registration> dir


    Directory: C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\registration


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        25-05-2025     11:30            280 login.html


(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\registration> cd..
(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts\templates> cd..
(base) PS C:\Users\Soumyajit\Downloads\per1\core\accounts> cd..
(base) PS C:\Users\Soumyajit\Downloads\per1\core> cd .\core\
(base) PS C:\Users\Soumyajit\Downloads\per1\core\core> dir


    Directory: C:\Users\Soumyajit\Downloads\per1\core\core


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        25-05-2025     22:00                __pycache__
-a----        25-05-2025     08:43            401 asgi.py
-a----        25-05-2025     08:47           3420 settings.py
-a----        25-05-2025     21:59           2256 urls.py
-a----        25-05-2025     08:43            401 wsgi.py
-a----        25-05-2025     08:43              0 __init__.py


(base) PS C:\Users\Soumyajit\Downloads\per1\core\core> ", my code for C:\Users\Soumyajit\Downloads\per1\core\core\settings.py is : """"
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-xvl-aylj+hm5-rv=^b1o!#clw%i%60hw)5x)yn3sg27ua6n0)q"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'accounts',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
LOGIN_REDIRECT_URL = "dashboard"
LOGOUT_REDIRECT_URL = "home"
", my code for C:\Users\Soumyajit\Downloads\per1\core\core\urls.py is : """"
URL configuration for core project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from accounts import views as user_views
from accounts.views import export_charial_bills, export_charial_daily_expenses, export_charial_trade
urlpatterns = [
    path("admin/", admin.site.urls),
    path('', include('django.contrib.auth.urls')),
    path('', user_views.home, name='home'),
    path('dashboard/', user_views.dashboard, name='dashboard'),
    path('charial/', include([
        path('', user_views.charial_main, name='charial_main'),
        path('bill/', user_views.charial_bill, name='charial_bill'),
        path('daily-expenses/', user_views.charial_daily_expenses, name='charial_daily'),
        path('trade/', user_views.charial_trade, name='charial_trade'),
        path('balance-sheet/', user_views.charial_balance_sheet, name='charial_balance'),
    ])),
    
    path('mahisgoat/', include([
        path('', user_views.mahisgoat_main, name='mahisgoat_main'),
        path('bill/', user_views.mahisgoat_bill, name='mahisgoat_bill'),
        path('daily-expenses/', user_views.mahisgoat_daily_expenses, name='mahisgoat_daily'),
        path('trade/', user_views.mahisgoat_trade, name='mahisgoat_trade'),
        path('balance-sheet/', user_views.mahisgoat_balance_sheet, name='mahisgoat_balance'),
    ])),
    path('charial/export-bills/', export_charial_bills, name='export_charial_bills'),
    path('charial/export-daily/', export_charial_daily_expenses, name='export_charial_daily'),
    path('charial/export-trade/', export_charial_trade, name='export_charial_trade')
]
", my code for C:\Users\Soumyajit\Downloads\per1\core\manage.py is : "#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()
", my code for C:\Users\Soumyajit\Downloads\per1\core\accounts\views.py is : "from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from django.http import HttpResponse
from .models import CharialBillPartyName, CharialBill, CharialDailyExpenses, CharialTradeSeller, CharialTrade
from .forms import PartyNameForm, CharialBillForm, WagesNameForm, DailyExpenseForm, OtherExpensesNameForm, TradeSellerForm, TradeForm
import pandas as pd

# Context processor for current date (add this to settings.py later)
def get_current_date(request):
    return {'current_date': timezone.now().date()}

def home(request):
    if request.user.is_authenticated:
        return redirect('dashboard')
    return redirect('login')

@login_required
def dashboard(request):
    context = {
        'current_date': timezone.now().date()
    }
    return render(request, 'dashboard.html', context)

# Charial Views
@login_required
def charial_main(request):
    context = {
        'heading': 'CHARIAL Dashboard',
        'current_date': timezone.now().date()
    }
    return render(request, 'charial/main.html', context)

@login_required
def charial_bill(request):
    # Handle party name form
    party_form = PartyNameForm(request.POST or None)
    if request.method == 'POST' and 'party_submit' in request.POST:
        if party_form.is_valid():
            party_form.save()
            return redirect('charial_bill')

    # Handle bill form
    bill_form = CharialBillForm(request.POST or None)
    if request.method == 'POST' and 'bill_submit' in request.POST:
        if bill_form.is_valid():
            bill_form.save()
            return redirect('charial_bill')

    # Filter handling
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')
    
    bills = CharialBill.objects.all()
    if start_date and end_date:
        bills = bills.filter(date__range=[start_date, end_date])
    elif start_date:
        bills = bills.filter(date__gte=start_date)
    elif end_date:
        bills = bills.filter(date__lte=end_date)

    # Calculate totals
    total_bill = sum(bill.totalBill for bill in bills)
    total_commission = sum(bill.commissionAmount for bill in bills)
    total_others = sum(bill.others for bill in bills)
    total_net = sum(bill.netBill for bill in bills)

    context = {
        'heading': 'CHARIAL BILL Management',
        'party_form': party_form,
        'bill_form': bill_form,
        'bills': bills,
        'total_bill': total_bill,
        'total_commission': total_commission,
        'total_others': total_others,
        'total_net': total_net,
        'current_date': timezone.now().date()
    }
    return render(request, 'charial/bill.html', context)

@login_required
def export_charial_bills(request):
    # Get filter parameters
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')
    
    bills = CharialBill.objects.all()
    if start_date and end_date:
        bills = bills.filter(date__range=[start_date, end_date])
    
    # Create DataFrame
    data = []
    for bill in bills:
        data.append([
            bill.date,
            bill.partyName.partyName,
            float(bill.totalBill),
            float(bill.commissionPercentage),
            float(bill.commissionAmount),
            float(bill.others),
            float(bill.netBill)
        ])
    
    df = pd.DataFrame(data, columns=[
        'Date', 'Party Name', 'Total Bill', 'Commission %', 
        'Commission Amount', 'Others', 'Net Bill'
    ])
    
    # Create response
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="charial_bills.xlsx"'
    df.to_excel(response, index=False)
    return response

@login_required
def charial_daily_expenses(request):
    # Handle Wages Name Form
    wages_form = WagesNameForm(request.POST or None)
    if request.method == 'POST' and 'wages_submit' in request.POST:
        if wages_form.is_valid():
            wages_form.save()
            return redirect('charial_daily')

    # Handle Other Expenses Name Form
    other_form = OtherExpensesNameForm(request.POST or None)
    if request.method == 'POST' and 'other_submit' in request.POST:
        if other_form.is_valid():
            other_form.save()
            return redirect('charial_daily')

    # Handle Expense Form
 # ... existing code ...

    # Handle Expense Form
    expense_form = DailyExpenseForm(request.POST or None)
    if request.method == 'POST' and 'expense_submit' in request.POST:
        if expense_form.is_valid():
            # Clean the data and handle conditional required fields
            expense_type = expense_form.cleaned_data.get('expenseType')
            wages_name = expense_form.cleaned_data.get('wagesName')
            other_name = expense_form.cleaned_data.get('otherExpensesName')
            
            if expense_type == 'wages' and not wages_name:
                expense_form.add_error('wagesName', 'This field is required for wages')
            elif expense_type == 'other' and not other_name:
                expense_form.add_error('otherExpensesName', 'This field is required for other expenses')
            else:
                expense = expense_form.save(commit=False)
                expense.date = timezone.now().date()
                expense.save()
                return redirect('charial_daily')

    # Filter handling
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')
    expense_type = request.GET.get('expense_type')

    expenses = CharialDailyExpenses.objects.all()
    
    if start_date and end_date:
        expenses = expenses.filter(date__range=[start_date, end_date])
    elif start_date:
        expenses = expenses.filter(date__gte=start_date)
    elif end_date:
        expenses = expenses.filter(date__lte=end_date)
    
    if expense_type:
        expenses = expenses.filter(expenseType=expense_type)

    total_amount = sum(expense.amount for expense in expenses)

    context = {
        'heading': 'CHARIAL Daily Expenses',
        'current_date': timezone.now().date(),
        'wages_form': wages_form,
        'other_form': other_form,
        'expense_form': expense_form,
        'expenses': expenses,
        'total_amount': total_amount
    }
    return render(request, 'charial/daily_expenses.html', context)

def export_charial_daily_expenses(request):
    # Get filter parameters
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')
    expense_type = request.GET.get('expense_type')
    
    expenses = CharialDailyExpenses.objects.all()
    
    if start_date and end_date:
        expenses = expenses.filter(date__range=[start_date, end_date])
    if expense_type:
        expenses = expenses.filter(expenseType=expense_type)
    
    # Create DataFrame
    data = []
    for expense in expenses:
        data.append([
            expense.date,
            expense.get_expenseType_display(),
            expense.get_name(),
            float(expense.amount)
        ])
    
    df = pd.DataFrame(data, columns=[
        'Date', 'Expense Type', 'Name', 'Amount'
    ])
    
    # Create response
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="charial_daily_expenses.xlsx"'
    df.to_excel(response, index=False)
    return response





def export_charial_trade(request):
    # Get all filter parameters
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')
    unique_names = request.GET.get('unique_names', False)
    
    # Replicate the same filtering logic as main view
    trades = CharialTrade.objects.all()
    
    # Date filtering
    if start_date and end_date:
        trades = trades.filter(date__range=[start_date, end_date])
    elif start_date:
        trades = trades.filter(date__gte=start_date)
    elif end_date:
        trades = trades.filter(date__lte=end_date)
    
    # Unique names filter
    if unique_names:
        latest_trades = CharialTrade.objects.filter(
            seller=OuterRef('seller')
        ).order_by('-date', '-tradeId')
        trades = trades.filter(pk__in=Subquery(latest_trades.values('pk')[:1]))

    # Create DataFrame with identical data to web view
    data = []
    for trade in trades:
        data.append([
            trade.date.strftime("%Y-%m-%d"),
            trade.seller.name,
            float(trade.todayPurchase),
            float(trade.amPayment),
            float(trade.pmPayment),
            float(trade.new_pending)
        ])
    
    df = pd.DataFrame(data, columns=[
        'Date', 'Seller', 'Today Purchase', 
        'AM Payment', 'PM Payment', 'New Pending'
    ])
    
    # Add totals row matching web view
    totals = [
        'Totals',
        '',
        df['Today Purchase'].sum(),
        df['AM Payment'].sum(),
        df['PM Payment'].sum(),
        df['New Pending'].sum()
    ]
    df.loc[len(df)] = totals
    
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="charial_trade.xlsx"'
    df.to_excel(response, index=False)
    return response

from django.db.models import Subquery, OuterRef
@login_required
def charial_trade(request):
    # Seller Form
    seller_form = TradeSellerForm(request.POST or None)
    if request.method == 'POST' and 'seller_submit' in request.POST:
        if seller_form.is_valid():
            seller_form.save()
            return redirect('charial_trade')

    # Trade Form
    trade_form = TradeForm(request.POST or None)
    if request.method == 'POST' and 'trade_submit' in request.POST:
        if trade_form.is_valid():
            trade_form.save()
            return redirect('charial_trade')

    # Filter handling
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')
    unique_names = request.GET.get('unique_names', False)
    
    # Base queryset
    trades = CharialTrade.objects.all()
    
    # Date filtering
    if start_date and end_date:
        trades = trades.filter(date__range=[start_date, end_date])
    elif start_date:
        trades = trades.filter(date__gte=start_date)
    elif end_date:
        trades = trades.filter(date__lte=end_date)
    
    # Unique names filter
    if unique_names:
        latest_trades = CharialTrade.objects.filter(
            seller=OuterRef('seller')
        ).order_by('-date', '-tradeId')
        trades = trades.filter(
            pk__in=Subquery(latest_trades.values('pk')[:1])
        )

    # Totals calculation
    total_purchase = sum(t.todayPurchase for t in trades)
    total_am = sum(t.amPayment for t in trades)
    total_pm = sum(t.pmPayment for t in trades)
    total_new_pending = sum(t.new_pending for t in trades)

    context = {
        'heading': 'CHARIAL Trade',
        'current_date': timezone.now().date(),
        'seller_form': seller_form,
        'trade_form': trade_form,
        'trades': trades,
        'total_purchase': total_purchase,
        'total_am': total_am,
        'total_pm': total_pm,
        'total_new_pending': total_new_pending,
        'unique_names': unique_names
    }
    return render(request, 'charial/trade.html', context)

@login_required
def charial_balance_sheet(request):
    context = {
        'heading': 'CHARIAL Balance Sheet',
        'current_date': timezone.now().date()
    }
    return render(request, 'charial/balance_sheet.html', context)

# Mahisgoat Views
@login_required
def mahisgoat_main(request):
    context = {
        'heading': 'MAHISGOAT Dashboard',
        'current_date': timezone.now().date()
    }
    return render(request, 'mahisgoat/main.html', context)

@login_required
def mahisgoat_bill(request):
    context = {
        'heading': 'MAHISGOAT BILL Management',
        'current_date': timezone.now().date()
    }
    return render(request, 'mahisgoat/bill.html', context)

@login_required
def mahisgoat_daily_expenses(request):
    context = {
        'heading': 'MAHISGOAT Daily Expenses',
        'current_date': timezone.now().date()
    }
    return render(request, 'mahisgoat/daily_expenses.html', context)

@login_required
def mahisgoat_trade(request):
    context = {
        'heading': 'MAHISGOAT TRADE',
        'current_date': timezone.now().date()
    }
    return render(request, 'mahisgoat/trade.html', context)

@login_required
def mahisgoat_balance_sheet(request):
    context = {
        'heading': 'MAHISGOAT Balance Sheet',
        'current_date': timezone.now().date()
    }
    return render(request, 'mahisgoat/balance_sheet.html', context)", my code for C:\Users\Soumyajit\Downloads\per1\core\accounts\models.py is : "from django.db import models
from django.utils import timezone

class CharialBillPartyName(models.Model):
    partyNameId = models.AutoField(primary_key=True)
    partyName = models.CharField(max_length=100, unique=True, error_messages={'unique': 'This party name already exists!'})
    dateAdded = models.DateField(default=timezone.now)

    def __str__(self):
        return self.partyName

class CharialBill(models.Model):
    partyName = models.ForeignKey(CharialBillPartyName, on_delete=models.CASCADE)
    totalBill = models.DecimalField(max_digits=10, decimal_places=2)
    commissionPercentage = models.DecimalField(max_digits=5, decimal_places=2)
    others = models.DecimalField(max_digits=10, decimal_places=2)
    date = models.DateField(default=timezone.now)
    
    @property
    def commissionAmount(self):
        return self.totalBill * (self.commissionPercentage / 100)
    
    @property
    def netBill(self):
        return self.totalBill - (self.commissionAmount + self.others)

class CharialDailyExpensesWagesName(models.Model):
    wagesNameId = models.AutoField(primary_key=True)
    wagesName = models.CharField(max_length=100, unique=True, error_messages={'unique': 'This wage name already exists!'})
    dateAdded = models.DateField(default=timezone.now)

    def __str__(self):
        return self.wagesName

class CharialDailyExpensesOtherExpensesName(models.Model):
    otherExpensesId = models.AutoField(primary_key=True)
    otherExpensesName = models.CharField(max_length=100, unique=True, error_messages={'unique': 'This expense name already exists!'})
    dateAdded = models.DateField(default=timezone.now)

    def __str__(self):
        return self.otherExpensesName

class CharialDailyExpenses(models.Model):
    EXPENSE_TYPES = [
        ('wages', 'Wages'),
        ('other', 'Other'),
    ]
    
    expenseId = models.AutoField(primary_key=True)
    date = models.DateField(default=timezone.now)
    expenseType = models.CharField(max_length=10, choices=EXPENSE_TYPES)
    wagesName = models.ForeignKey(CharialDailyExpensesWagesName, on_delete=models.CASCADE, null=True, blank=True)
    otherExpensesName = models.ForeignKey(CharialDailyExpensesOtherExpensesName, on_delete=models.CASCADE, null=True, blank=True)
    amount = models.DecimalField(max_digits=10, decimal_places=2)

    def get_name(self):
        return self.wagesName if self.expenseType == 'wages' else self.otherExpensesName

class CharialTradeSeller(models.Model):
    sellerId = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100, unique=True, error_messages={'unique': 'This seller name already exists!'})
    pendingAmount = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    dateAdded = models.DateField(default=timezone.now)

    def __str__(self):
        return self.name
class CharialTrade(models.Model):
    tradeId = models.AutoField(primary_key=True)
    date = models.DateField(default=timezone.now)
    seller = models.ForeignKey(CharialTradeSeller, on_delete=models.CASCADE)
    todayPurchase = models.DecimalField(max_digits=10, decimal_places=2)
    amPayment = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    pmPayment = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    # Add these new fields
    pprevious_pending = models.DecimalField(
        max_digits=10, 
        decimal_places=2, 
        default=0.00,
        editable=False
    )
    new_pending = models.DecimalField(
        max_digits=10, 
        decimal_places=2, 
        default=0.00,
        editable=False
    )

    def save(self, *args, **kwargs):
        # Store the pending amount before this transaction
        self.previous_pending = self.seller.pendingAmount
        
        # Calculate new pending
        self.new_pending = self.previous_pending + self.todayPurchase - (self.amPayment + self.pmPayment)
        
        # Update seller's record
        self.seller.pendingAmount = self.new_pending
        self.seller.save()
        
        super().save(*args, **kwargs)", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\tests.py is : "from django.test import TestCase

# Create your tests here.
", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\forms.py is : "from django import forms
from .models import CharialBillPartyName, CharialBill, CharialDailyExpensesOtherExpensesName, CharialDailyExpensesWagesName, CharialDailyExpenses, CharialTradeSeller, CharialTrade

class PartyNameForm(forms.ModelForm):
    class Meta:
        model = CharialBillPartyName
        fields = ['partyName']
        labels = {'partyName': 'Party Name'}
        widgets = {
            'partyName': forms.TextInput(attrs={
                'placeholder': 'Enter unique party name',
                'class': 'form-control'
            })
        }

class CharialBillForm(forms.ModelForm):
    class Meta:
        model = CharialBill
        fields = ['partyName', 'totalBill', 'commissionPercentage', 'others']
        labels = {
            'partyName': 'Select Party',
            'totalBill': 'Total Bill Amount',
            'commissionPercentage': 'Commission Percentage',
            'others': 'Other Deductions'
        }
        widgets = {
            'date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'partyName': forms.Select(attrs={'class': 'form-control'}),
            'totalBill': forms.NumberInput(attrs={'class': 'form-control'}),
            'commissionPercentage': forms.NumberInput(attrs={'class': 'form-control'}),
            'others': forms.NumberInput(attrs={'class': 'form-control'})
        }

class WagesNameForm(forms.ModelForm):
    class Meta:
        model = CharialDailyExpensesWagesName
        fields = ['wagesName']
        labels = {'wagesName': 'Wages Name'}
        widgets = {
            'wagesName': forms.TextInput(attrs={
                'placeholder': 'Enter unique wage name',
                'class': 'form-control'
            })
        }

class OtherExpensesNameForm(forms.ModelForm):
    class Meta:
        model = CharialDailyExpensesOtherExpensesName
        fields = ['otherExpensesName']
        labels = {'otherExpensesName': 'Other Expense Name'}
        widgets = {
            'otherExpensesName': forms.TextInput(attrs={
                'placeholder': 'Enter unique expense name',
                'class': 'form-control'
            })
        }

class DailyExpenseForm(forms.ModelForm):
    class Meta:
        model = CharialDailyExpenses
        fields = ['expenseType', 'wagesName', 'otherExpensesName', 'amount']
        widgets = {
            'expenseType': forms.Select(attrs={
                'onchange': "toggleExpenseType()",
                'class': 'form-control'
            }),
            'wagesName': forms.Select(attrs={'class': 'form-control wages-field'}),
            'otherExpensesName': forms.Select(attrs={'class': 'form-control other-field'}),
            'amount': forms.NumberInput(attrs={'class': 'form-control'})
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['wagesName'].queryset = CharialDailyExpensesWagesName.objects.all()
        self.fields['otherExpensesName'].queryset = CharialDailyExpensesOtherExpensesName.objects.all()
        self.fields['wagesName'].required = False
        self.fields['otherExpensesName'].required = False

class TradeSellerForm(forms.ModelForm):
    class Meta:
        model = CharialTradeSeller
        fields = ['name', 'pendingAmount']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'pendingAmount': forms.NumberInput(attrs={'class': 'form-control'})
        }

class TradeForm(forms.ModelForm):
    class Meta:
        model = CharialTrade
        fields = ['seller', 'todayPurchase', 'amPayment', 'pmPayment']
        widgets = {
            'seller': forms.Select(attrs={'class': 'form-control'}),
            'todayPurchase': forms.NumberInput(attrs={'class': 'form-control'}),
            'amPayment': forms.NumberInput(attrs={'class': 'form-control'}),
            'pmPayment': forms.NumberInput(attrs={'class': 'form-control'})
        }", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\apps.py is : "from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "accounts"
" code for C:\Users\Soumyajit\Downloads\per1\core\accounts\admin.py is : "from django.contrib import admin
from .models import (
    CharialBillPartyName,
    CharialBill,
    CharialDailyExpensesWagesName,
    CharialDailyExpensesOtherExpensesName,
    CharialDailyExpenses,
    CharialTradeSeller,  # Add this
    CharialTrade  # Add this
)

# Existing registrations
admin.site.register(CharialBillPartyName)
admin.site.register(CharialBill)
admin.site.register(CharialDailyExpensesWagesName)
admin.site.register(CharialDailyExpensesOtherExpensesName)
admin.site.register(CharialDailyExpenses)

# Add these new registrations
admin.site.register(CharialTradeSeller)
admin.site.register(CharialTrade)", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\base.html is : "<!DOCTYPE html>
<html lang="en">
<head>
    <title>Auth System</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f4f6f8;
            margin: 0;
            padding: 0;
        }

        main {
            max-width: 800px;
            margin: 40px auto;
            padding: 30px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        h1, h2 {
            color: #2c3e50;
        }

        .btn {
            display: inline-block;
            padding: 12px 20px;
            background-color: #2980b9;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-weight: 500;
            transition: background-color 0.3s ease, transform 0.2s ease;
            margin: 10px 10px 0 0;
        }

        .btn:hover {
            background-color: #1f6391;
            transform: translateY(-2px);
        }

        form {
            display: flex;
            flex-direction: column;
        }

        form input, form select {
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        button {
            padding: 10px 20px;
            background: #27ae60;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }

        button:hover {
            background: #219150;
        }

        .options {
            margin-top: 20px;
        }
        .section {
    margin: 20px 0;
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
}

.table th, .table td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

.table th {
    background-color: #f2f2f2;
}

input[type="date"], select {
    padding: 5px;
    margin: 5px;
}
.wages-field, .other-field {
    display: none;
}
.form-group {
    margin-bottom: 15px;
}

.form-control {
    display: block;
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

select.form-control {
    height: 38px;
}
.error-message {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
        }
.errorlist {
            list-style-type: none;
            padding-left: 0;
            margin: 0;
        }
.error input, .error select {
            border-color: #dc3545 !important;
        }
.back-btn {
            margin-top: 20px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <main>
        {% block content %}
        {% endblock %}
    </main>
</body>
</html>
", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\dashboard.html is : "{% extends 'base.html' %}

{% block content %}
<h1>Dashboard</h1>
<p>Welcome, <strong>{{ user.username }}</strong>!</p>

<div class="options">
    <a href="{% url 'charial_main' %}" class="btn">Go to CHARIAL</a>
    <a href="{% url 'mahisgoat_main' %}" class="btn">Go to MAHISGOAT</a>
</div>

<div style="margin-top: 20px;">
    <a href="{% url 'logout' %}" class="btn" style="background-color: #c0392b;">Logout</a>
</div>
{% endblock %}
", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\home.html is : "{% extends 'base.html' %}

{% block content %}
<h1>Welcome to Our Site</h1>
{% if not user.is_authenticated %}
    <a href="{% ur.l 'login' %}" class="btn">Login</a>
{% else %}
    <a href="{% url 'dashboard' %}" class="btn">Go to Dashboard</a>
{% endif %}
{% endblock %}
" i will provide you more details please wait . and then i will said you what i want
























code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\registration\login.html is : "{% extends "base.html" %}
{% block content %}
<h2>Login</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type='submit'>Login</button>
</form>
<p style="margin-top: 15px;">Don't have an account? Contact admin to register.</p>
{% endblock %}
", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial\balance_sheet.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <!-- Add your specific content here later -->
    <a href="{% url 'charial_main' %}" class="btn back">Back to CHARIAL</a>
</div>
{% endblock %}", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial\bill.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <p>Current Date: {{ current_date }}</p>

    <!-- Add Party Section -->
    <div class="section">
        <h3>Add New Party</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ party_form.partyName.label_tag }}
                {{ party_form.partyName }}
                {% if party_form.partyName.errors %}
                    <div class="error-message">
                        {{ party_form.partyName.errors }}
                    </div>
                {% endif %}
            </div>
            <button type="submit" name="party_submit" class="btn">Save Party</button>
        </form>
    </div>

    <!-- Add Bill Section -->
    <div class="section">
        <h3>Add New Bill</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ bill_form.partyName.label_tag }}
                {{ bill_form.partyName }}
            </div>
            <div class="form-group">
                {{ bill_form.totalBill.label_tag }}
                {{ bill_form.totalBill }}
            </div>
            <div class="form-group">
                {{ bill_form.commissionPercentage.label_tag }}
                {{ bill_form.commissionPercentage }}
            </div>
            <div class="form-group">
                {{ bill_form.others.label_tag }}
                {{ bill_form.others }}
            </div>
            <button type="submit" name="bill_submit" class="btn">Save Bill</button>
        </form>
    </div>

    <!-- Filter Section -->
    <div class="section">
        <h3>Filter Bills</h3>
        <form method="get">
            <input type="date" name="start_date" class="form-control">
            <input type="date" name="end_date" class="form-control">
            <button type="submit" class="btn">Filter</button>
            <a href="{% url 'charial_bill' %}" class="btn">Clear</a>
        </form>
    </div>

    <!-- Bills Table -->
    <div class="section">
        <h3>Bills Records</h3>
        <table class="table">
            <!-- Table content remains same -->
             <thead>
                <tr>
                    <th>Date</th>
                    <th>Party Name</th>
                    <th>Total Bill</th>
                    <th>Commission %</th>
                    <th>Commission Amount</th>
                    <th>Others</th>
                    <th>Net Bill</th>
                </tr>
            </thead>
            <tbody>
                {% for bill in bills %}
                <tr>
                    <td>{{ bill.date }}</td>
                    <td>{{ bill.partyName.partyName }}</td>
                    <td>{{ bill.totalBill }}</td>
                    <td>{{ bill.commissionPercentage }}</td>
                    <td>{{ bill.commissionAmount }}</td>
                    <td>{{ bill.others }}</td>
                    <td>{{ bill.netBill }}</td>
                </tr>
                {% endfor %}
            </tbody>
            <tfoot>
                <tr>
                    <th colspan="2">Totals</th>
                    <th>{{ total_bill }}</th>
                    <th></th>
                    <th>{{ total_commission }}</th>
                    <th>{{ total_others }}</th>
                    <th>{{ total_net }}</th>
                </tr>
            </tfoot>
        </table>
        <a href="{% url 'export_charial_bills' %}?{{ request.GET.urlencode }}" class="btn">Export to Excel</a>
    </div>

    <a href="{% url 'charial_main' %}" class="btn back">Back to CHARIAL</a>
</div>
{% endblock %}
" code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial\daily_expenses.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <p>Current Date: {{ current_date }}</p>

    <!-- Add Wages Name Section -->
    <div class="section">
        <h3>Add New Wages Name</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ wages_form.wagesName.label_tag }}
                {{ wages_form.wagesName }}
                {% if wages_form.wagesName.errors %}
                    <div class="error-message">
                        {{ wages_form.wagesName.errors }}
                    </div>
                {% endif %}
            </div>
            <button type="submit" name="wages_submit" class="btn">Save Wages Name</button>
        </form>
    </div>

    <!-- Add Other Expense Name Section -->
    <div class="section">
        <h3>Add Other Expense Name</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ other_form.otherExpensesName.label_tag }}
                {{ other_form.otherExpensesName }}
                {% if other_form.otherExpensesName.errors %}
                    <div class="error-message">
                        {{ other_form.otherExpensesName.errors }}
                    </div>
                {% endif %}
            </div>
            <button type="submit" name="other_submit" class="btn">Save Expense Name</button>
        </form>
    </div>

    <!-- Add Expense Section -->
    <div class="section">
        <h3>Add Daily Expense</h3>
        <form method="post" id="expenseForm">
            {% csrf_token %}
            <div class="form-group">
                {{ expense_form.expenseType.label_tag }}
                {{ expense_form.expenseType }}
            </div>
            
            <div id="wagesNameField" class="form-group">
                {{ expense_form.wagesName.label_tag }}
                {{ expense_form.wagesName }}
                {% if expense_form.wagesName.errors %}
                    <div class="error-message">
                        {{ expense_form.wagesName.errors }}
                    </div>
                {% endif %}
            </div>

            <div id="otherExpensesNameField" class="form-group">
                {{ expense_form.otherExpensesName.label_tag }}
                {{ expense_form.otherExpensesName }}
                {% if expense_form.otherExpensesName.errors %}
                    <div class="error-message">
                        {{ expense_form.otherExpensesName.errors }}
                    </div>
                {% endif %}
            </div>

            <div class="form-group">
                {{ expense_form.amount.label_tag }}
                {{ expense_form.amount }}
                {% if expense_form.amount.errors %}
                    <div class="error-message">
                        {{ expense_form.amount.errors }}
                    </div>
                {% endif %}
            </div>

            <button type="submit" name="expense_submit" class="btn">Save Expense</button>
        </form>
    </div>

    <!-- Filter Section -->
    <div class="section">
        <h3>Filter Expenses</h3>
        <form method="get">
            <input type="date" name="start_date" class="form-control">
            <input type="date" name="end_date" class="form-control">
            <select name="expense_type" class="form-control">
                <option value="">All Types</option>
                <option value="wages">Wages</option>
                <option value="other">Other</option>
            </select>
            <button type="submit" class="btn">Filter</button>
            <a href="{% url 'charial_daily' %}" class="btn">Clear</a>
        </form>
    </div>

    <!-- Expenses Table -->
    <div class="section">
        <h3>Expenses Records</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Type</th>
                    <th>Name</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                {% for expense in expenses %}
                <tr>
                    <td>{{ expense.date }}</td>
                    <td>{{ expense.get_expenseType_display }}</td>
                    <td>{{ expense.get_name }}</td>
                    <td>{{ expense.amount }}</td>
                </tr>
                {% endfor %}
            </tbody>
            <tfoot>
                <tr>
                    <th colspan="3">Total</th>
                    <th>{{ total_amount }}</th>
                </tr>
            </tfoot>
        </table>
        <a href="{% url 'export_charial_daily' %}?{{ request.GET.urlencode }}" class="btn">Export to Excel</a>
    </div>

    <!-- Back Button -->
    <div style="margin-top: 20px;">
        <a href="{% url 'charial_main' %}" class="btn">Back to CHARIAL</a>
    </div>
</div>

<script>
function toggleExpenseType() {
    const expenseType = document.querySelector('[name="expenseType"]').value;
    document.getElementById('wagesNameField').style.display = expenseType === 'wages' ? 'block' : 'none';
    document.getElementById('otherExpensesNameField').style.display = expenseType === 'other' ? 'block' : 'none';
    
    // Reset fields when switching types
    if(expenseType !== 'wages') document.querySelector('[name="wagesName"]').value = '';
    if(expenseType !== 'other') document.querySelector('[name="otherExpensesName"]').value = '';
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    toggleExpenseType();
    
    // Add event listener for expense type change
    document.querySelector('[name="expenseType"]').addEventListener('change', toggleExpenseType);
});
</script>
{% endblock %}", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial\main.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <div class="button-group">
        <a href="{% url 'charial_bill' %}" class="btn">CHARIAL BILL</a>
        <a href="{% url 'charial_daily' %}" class="btn">CHARIAL DAILY EXPENSES</a>
        <a href="{% url 'charial_trade' %}" class="btn">CHARIAL TRADE</a>
        <a href="{% url 'charial_balance' %}" class="btn">CHARIAL MONTHLY BALANCE SHEET</a>
    </div>
    <a href="{% url 'dashboard' %}" class="btn back">Back to Dashboard</a>
</div>
{% endblock %}", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial\trade.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <p>Current Date: {{ current_date }}</p>

    <!-- Add Seller Section -->
    <div class="section">
        <h3>Add New Seller</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ seller_form.name.label_tag }}
                {{ seller_form.name }}
                {% if seller_form.name.errors %}
                    <div class="error-message">
                        {{ seller_form.name.errors }}
                    </div>
                {% endif %}
            </div>
            <div class="form-group">
                {{ seller_form.pendingAmount.label_tag }}
                {{ seller_form.pendingAmount }}
            </div>
            <button type="submit" name="seller_submit" class="btn">Save Seller</button>
        </form>
    </div>

    <!-- Add Trade Section -->
    <div class="section">
        <h3>Add Daily Trade</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ trade_form.seller.label_tag }}
                {{ trade_form.seller }}
            </div>
            <div class="form-group">
                {{ trade_form.todayPurchase.label_tag }}
                {{ trade_form.todayPurchase }}
            </div>
            <div class="form-group">
                {{ trade_form.amPayment.label_tag }}
                {{ trade_form.amPayment }}
            </div>
            <div class="form-group">
                {{ trade_form.pmPayment.label_tag }}
                {{ trade_form.pmPayment }}
            </div>
            <button type="submit" name="trade_submit" class="btn">Save Trade</button>
        </form>
    </div>

    {% comment %} <!-- Filter Section -->
    <div class="section">
        <h3>Filter Records</h3>
        <form method="get">
            <input type="date" name="start_date" class="form-control">
            <input type="date" name="end_date" class="form-control">
            <button type="submit" class="btn">Filter</button>
            <a href="{% url 'charial_trade' %}" class="btn">Clear</a>
        </form>
    </div> {% endcomment %}



    <!-- Filter Section -->
<div class="section">
    <h3>Filter Records</h3>
    <form method="get">
        <div class="filter-option">
            <label>
                <input type="checkbox" name="unique_names" 
                    {% if unique_names %}checked{% endif %}>
                Show Last Record per Seller
            </label>
        </div>
        <div class="date-filters">
            <input type="date" name="start_date" class="form-control">
            <input type="date" name="end_date" class="form-control">
        </div>
        <div class="filter-buttons">
            <button type="submit" class="btn">Apply Filters</button>
            <a href="{% url 'charial_trade' %}" class="btn">Clear All</a>
        </div>
    </form>
</div>

<style>
/* Add these styles to your existing CSS */
.filter-option {
    margin-bottom: 15px;
}

.filter-option label {
    display: flex;
    align-items: center;
    gap: 8px;
}

.date-filters {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
}

.filter-buttons {
    display: flex;
    gap: 10px;
    margin-top: 10px;
}

.form-control {
    padding: 6px 12px;
    border-radius: 4px;
    border: 1px solid #ddd;
}
</style>

    <!-- Trade Records Table -->
    <div class="section">
        <h3>Trade Records</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Seller</th>
                    <th>Purchase</th>
                    <th>AM Payment</th>
                    <th>PM Payment</th>
                    <th>New Pending</th>
                </tr>
            </thead>
            <tbody>
                {% for trade in trades %}
                <tr>
                    <td>{{ trade.date }}</td>
                    <td>{{ trade.seller.name }}</td>
                    <td>{{ trade.todayPurchase }}</td>
                    <td>{{ trade.amPayment }}</td>
                    <td>{{ trade.pmPayment }}</td>
                    <td>{{ trade.new_pending }}</td>
                </tr>
                {% endfor %}
            </tbody>
            <!-- Update the tfoot section -->
<tfoot>
    <tr>
        <th colspan="2">Totals</th>
        <th>{{ total_purchase }}</th>
        <th>{{ total_am }}</th>
        <th>{{ total_pm }}</th>
        <th>{{ total_new_pending }}</th>
    </tr>
</tfoot>
        </table>
        <a href="{% url 'export_charial_trade' %}?{{ request.GET.urlencode }}" 
   class="btn" 
   style="margin-top: 15px;">
   Export to Excel
</a>
    </div>

    <a href="{% url 'charial_main' %}" class="btn back">Back to CHARIAL</a>
</div>
{% endblock %}", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat\balance_sheet.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <!-- Add your specific content here later -->
    <a href="{% url 'mahisgoat_main' %}" class="btn back">Back to MAHISGOAT</a>
</div>
{% endblock %}", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat\bill.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <!-- Add your specific content here later -->
    <a href="{% url 'mahisgoat_main' %}" class="btn back">Back to MAHISGOAT</a>
</div>
{% endblock %}", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat\daily_expenses.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <!-- Add your specific content here later -->
    <a href="{% url 'mahisgoat_main' %}" class="btn back">Back to MAHISGOAT</a>
</div>
{% endblock %}", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat\main.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <div class="button-group">
        <a href="{% url 'mahisgoat_bill' %}" class="btn">MAHISGOAT BILL</a>
        <a href="{% url 'mahisgoat_daily' %}" class="btn">MAHISGOAT DAILY EXPENSES</a>
        <a href="{% url 'mahisgoat_trade' %}" class="btn">MAHISGOAT TRADE</a>
        <a href="{% url 'mahisgoat_balance' %}" class="btn">MAHISGOAT MONTHLY BALANCE SHEET</a>
    </div>
    <a href="{% url 'dashboard' %}" class="btn back">Back to Dashboard</a>
</div>
{% endblock %}", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat\trade.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <!-- Add your specific content here later -->
    <a href="{% url 'mahisgoat_main' %}" class="btn back">Back to MAHISGOAT</a>
</div>
{% endblock %}" i want if user come in the page : "http://127.0.0.1:8000/charial/balance-sheet/" here date will shown, here user will get a option for selecting the year by default the year will be current year and user can change the year if he want. also user will see an option for selecting the month. by default the month should be current month and there will be drop down for selecting the month.let user select 2025 and january then i want in the bellow section a table like structure should come there user can see all the dates of the month with year like 1st jan 2025, 2nd jan 2025 similarly upto 31st jan 2025. similarly of user select month is februal=ry then 1st feb to 28 th feb. fir march 1 to 31 . for april 1 to 30 . etc. 
i have said you that a table like structure should come . here the column heading should be date, bill, commision, extra, britty, income, expenses, profit/loss. i want the table should work like a calculator here in eich sell apart from date, income, profit/loss. user can put the value and in the below section undert for a month after all the dates in the date column's last row the content is "Total" and then on that row we can see the total value of eich column's cumulative value. 
for any perticular date income will be automatically calcualte income = commision + extra + britty. and for any perticular date profit/loss = income - expences. and if the profit/loss is a negative number then the cell background should be red color and if its  a posiive value then its a green color. i want user can save record at any point of time by clicking on save record buttton. i want this rcord should be save in  the  databse name as  charial_balance_sheet table, here all the dates record save by the user should be save . here the column heading are unique id, date, bill, commision, extra, britty, income, expenses, profit/loss. i want if user want to view any record for any year's any month her can see the record by applying filter. filter are by selecting the year, selecting the month . i want
user can download the filtered data as excel sheet. if user want all the dates data he can download the data also for any perticular year or a year renge or a month renge. i want in the excel also if the profit is positive that shell should be green and if negayiobve then that sell shoule be red. 













my current code of C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial\balance_sheet.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    
    <!-- Filter Form -->
    <div class="section">
        <h3>Select Month and Year</h3>
        <form method="get">
            <div class="form-group">
                <label for="year">Year:</label>
                <select name="year" id="year" class="form-control">
                    {% for year in years %}
                        <option value="{{ year }}" {% if year == selected_year %}selected{% endif %}>{{ year }}</option>
                    {% endfor %}
                </select>
            </div>
            
            <div class="form-group">
                <label for="month">Month:</label>
                <select name="month" id="month" class="form-control">
                    {% for num, name in months %}
                        <option value="{{ num }}" {% if num == selected_month %}selected{% endif %}>{{ name }}</option>
                    {% endfor %}
                </select>
            </div>
            
            <button type="submit" class="btn">Load Records</button>
            <a href="{% url 'export_balance_sheet' %}?year={{ selected_year }}&month={{ selected_month }}" 
               class="btn" 
               style="background-color: #27ae60;">
                Export to Excel
            </a>
        </form>
    </div>

    <!-- Balance Sheet Form -->
    <div class="section">
        <h3>Balance Sheet - {{ selected_month|date:"F" }} {{ selected_year }}</h3>
        <form id="balanceForm">
            {% csrf_token %}
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Bill</th>
                        <th>Commission</th>
                        <th>Extra</th>
                        <th>Britty</th>
                        <th>Income<br>(Commission + Extra + Britty)</th>
                        <th>Expenses</th>
                        <th>Profit/Loss<br>(Income - Expenses)</th>
                    </tr>
                </thead>
                <tbody>
                    {% for form in forms %}
                    <tr>
                        <td>{{ form.date.value|date:"d M Y" }}</td>
                        <td>
                            {{ form.bill }}
                            {{ form.date.as_hidden }}
                        </td>
                        <td>{{ form.commission }}</td>
                        <td>{{ form.extra }}</td>
                        <td>{{ form.britty }}</td>
                        <td class="income-cell">0.00</td>
                        <td>{{ form.expenses }}</td>
                        <td class="profit-cell">0.00</td>
                    </tr>
                    {% endfor %}
                    <tr style="font-weight: bold; background-color: #f2f2f2;">
                        <td>Total</td>
                        <td id="total-bill">{{ totals.bill|default:"0.00" }}</td>
                        <td id="total-commission">{{ totals.commission|default:"0.00" }}</td>
                        <td id="total-extra">{{ totals.extra|default:"0.00" }}</td>
                        <td id="total-britty">{{ totals.britty|default:"0.00" }}</td>
                        <td id="total-income">{{ totals.income|default:"0.00" }}</td>
                        <td id="total-expenses">{{ totals.expenses|default:"0.00" }}</td>
                        <td id="total-profit">{{ totals.profit_loss|default:"0.00" }}</td>
                    </tr>
                </tbody>
            </table>
            <button type="button" id="saveBtn" class="btn">Save Records</button>
        </form>
    </div>

    <a href="{% url 'charial_main' %}" class="btn back">Back to CHARIAL</a>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const saveBtn = document.getElementById('saveBtn');
    const table = document.querySelector('table');
    
    // Function to calculate row values
    function calculateRow(row) {
        const bill = parseFloat(row.querySelector('[name$="bill"]').value) || 0;
        const commission = parseFloat(row.querySelector('[name$="commission"]').value) || 0;
        const extra = parseFloat(row.querySelector('[name$="extra"]').value) || 0;
        const britty = parseFloat(row.querySelector('[name$="britty"]').value) || 0;
        const expenses = parseFloat(row.querySelector('[name$="expenses"]').value) || 0;
        
        const income = commission + extra + britty;
        const profit = income - expenses;
        
        row.querySelector('.income-cell').textContent = income.toFixed(2);
        row.querySelector('.profit-cell').textContent = profit.toFixed(2);
        
        // Set profit cell color
        if (profit > 0) {
            row.querySelector('.profit-cell').style.backgroundColor = '#C6EFCE';
            row.querySelector('.profit-cell').style.color = '#006100';
        } else if (profit < 0) {
            row.querySelector('.profit-cell').style.backgroundColor = '#FFC7CE';
            row.querySelector('.profit-cell').style.color = '#9C0006';
        } else {
            row.querySelector('.profit-cell').style.backgroundColor = '';
            row.querySelector('.profit-cell').style.color = '';
        }
        
        return { bill, commission, extra, britty, income, expenses, profit };
    }
    
    // Function to calculate totals
    function calculateTotals() {
        let totals = {
            bill: 0,
            commission: 0,
            extra: 0,
            britty: 0,
            income: 0,
            expenses: 0,
            profit: 0
        };
        
        const rows = table.querySelectorAll('tbody tr:not(:last-child)');
        rows.forEach(row => {
            const values = calculateRow(row);
            for (const key in values) {
                totals[key] += values[key];
            }
        });
        
        // Update totals row
        document.getElementById('total-bill').textContent = totals.bill.toFixed(2);
        document.getElementById('total-commission').textContent = totals.commission.toFixed(2);
        document.getElementById('total-extra').textContent = totals.extra.toFixed(2);
        document.getElementById('total-britty').textContent = totals.britty.toFixed(2);
        document.getElementById('total-income').textContent = totals.income.toFixed(2);
        document.getElementById('total-expenses').textContent = totals.expenses.toFixed(2);
        document.getElementById('total-profit').textContent = totals.profit.toFixed(2);
        
        // Set total profit color
        const totalProfitCell = document.getElementById('total-profit');
        if (totals.profit > 0) {
            totalProfitCell.style.backgroundColor = '#C6EFCE';
            totalProfitCell.style.color = '#006100';
        } else if (totals.profit < 0) {
            totalProfitCell.style.backgroundColor = '#FFC7CE';
            totalProfitCell.style.color = '#9C0006';
        } else {
            totalProfitCell.style.backgroundColor = '';
            totalProfitCell.style.color = '';
        }
    }
    
    // Calculate initial values
    calculateTotals();
    
    // Add event listeners to all input fields
    const inputs = table.querySelectorAll('input');
    inputs.forEach(input => {
        input.addEventListener('input', calculateTotals);
    });
    
    // Save button handler
    saveBtn.addEventListener('click', function() {
        const rows = table.querySelectorAll('tbody tr:not(:last-child)');
        const savePromises = [];
        
        rows.forEach(row => {
            const formData = new FormData();
            const dateInput = row.querySelector('[name$="date"]');
            const billInput = row.querySelector('[name$="bill"]');
            const commissionInput = row.querySelector('[name$="commission"]');
            const extraInput = row.querySelector('[name$="extra"]');
            const brittyInput = row.querySelector('[name$="britty"]');
            const expensesInput = row.querySelector('[name$="expenses"]');
            
            // Add values to form data
            formData.append('date', dateInput.value);
            formData.append('bill', billInput.value || '0');
            formData.append('commission', commissionInput.value || '0');
            formData.append('extra', extraInput.value || '0');
            formData.append('britty', brittyInput.value || '0');
            formData.append('expenses', expensesInput.value || '0');
            
            // Send AJAX request
            const promise = fetch('', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
                }
            })
            .then(response => response.json());
            
            savePromises.push(promise);
        });
        
        // Handle all save operations
        Promise.all(savePromises)
            .then(results => {
                const allSuccess = results.every(r => r.status === 'success');
                if (allSuccess) {
                    alert('All records saved successfully!');
                } else {
                    const errors = results.filter(r => r.status === 'error');
                    console.error('Errors saving records:', errors);
                    alert(`${errors.length} records failed to save. Check console for details.`);
                }
            })
            .catch(error => {
                console.error('Error saving records:', error);
                alert('Error saving records. Please try again.');
            });
    });
});
</script>

<style>
.table td, .table th {
    text-align: center;
    vertical-align: middle;
}

input[type="number"] {
    width: 100px;
    text-align: center;
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.income-cell, .profit-cell {
    font-weight: bold;
    padding: 10px;
}

.form-group {
    margin-bottom: 0;
}

#saveBtn {
    margin-top: 20px;
    padding: 10px 20px;
    background-color: #2980b9;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

#saveBtn:hover {
    background-color: #1f6391;
}
</style>
{% endblock %}
", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial\bill.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <p>Current Date: {{ current_date }}</p>

    <!-- Add Party Section -->
    <div class="section">
        <h3>Add New Party</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ party_form.partyName.label_tag }}
                {{ party_form.partyName }}
                {% if party_form.partyName.errors %}
                    <div class="error-message">
                        {{ party_form.partyName.errors }}
                    </div>
                {% endif %}
            </div>
            <button type="submit" name="party_submit" class="btn">Save Party</button>
        </form>
    </div>

    <!-- Add Bill Section -->
    <div class="section">
        <h3>Add New Bill</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ bill_form.partyName.label_tag }}
                {{ bill_form.partyName }}
            </div>
            <div class="form-group">
                {{ bill_form.totalBill.label_tag }}
                {{ bill_form.totalBill }}
            </div>
            <div class="form-group">
                {{ bill_form.commissionPercentage.label_tag }}
                {{ bill_form.commissionPercentage }}
            </div>
            <div class="form-group">
                {{ bill_form.others.label_tag }}
                {{ bill_form.others }}
            </div>
            <button type="submit" name="bill_submit" class="btn">Save Bill</button>
        </form>
    </div>

    <!-- Filter Section -->
    <div class="section">
        <h3>Filter Bills</h3>
        <form method="get">
            <input type="date" name="start_date" class="form-control">
            <input type="date" name="end_date" class="form-control">
            <button type="submit" class="btn">Filter</button>
            <a href="{% url 'charial_bill' %}" class="btn">Clear</a>
        </form>
    </div>

    <!-- Bills Table -->
    <div class="section">
        <h3>Bills Records</h3>
        <table class="table">
            <!-- Table content remains same -->
             <thead>
                <tr>
                    <th>Date</th>
                    <th>Party Name</th>
                    <th>Total Bill</th>
                    <th>Commission %</th>
                    <th>Commission Amount</th>
                    <th>Others</th>
                    <th>Net Bill</th>
                </tr>
            </thead>
            <tbody>
                {% for bill in bills %}
                <tr>
                    <td>{{ bill.date }}</td>
                    <td>{{ bill.partyName.partyName }}</td>
                    <td>{{ bill.totalBill }}</td>
                    <td>{{ bill.commissionPercentage }}</td>
                    <td>{{ bill.commissionAmount }}</td>
                    <td>{{ bill.others }}</td>
                    <td>{{ bill.netBill }}</td>
                </tr>
                {% endfor %}
            </tbody>
            <tfoot>
                <tr>
                    <th colspan="2">Totals</th>
                    <th>{{ total_bill }}</th>
                    <th></th>
                    <th>{{ total_commission }}</th>
                    <th>{{ total_others }}</th>
                    <th>{{ total_net }}</th>
                </tr>
            </tfoot>
        </table>
        <a href="{% url 'export_charial_bills' %}?{{ request.GET.urlencode }}" class="btn">Export to Excel</a>
    </div>

    <a href="{% url 'charial_main' %}" class="btn back">Back to CHARIAL</a>
</div>
{% endblock %}
", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial\daily_expenses.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <p>Current Date: {{ current_date }}</p>

    <!-- Add Wages Name Section -->
    <div class="section">
        <h3>Add New Wages Name</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ wages_form.wagesName.label_tag }}
                {{ wages_form.wagesName }}
                {% if wages_form.wagesName.errors %}
                    <div class="error-message">
                        {{ wages_form.wagesName.errors }}
                    </div>
                {% endif %}
            </div>
            <button type="submit" name="wages_submit" class="btn">Save Wages Name</button>
        </form>
    </div>

    <!-- Add Other Expense Name Section -->
    <div class="section">
        <h3>Add Other Expense Name</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ other_form.otherExpensesName.label_tag }}
                {{ other_form.otherExpensesName }}
                {% if other_form.otherExpensesName.errors %}
                    <div class="error-message">
                        {{ other_form.otherExpensesName.errors }}
                    </div>
                {% endif %}
            </div>
            <button type="submit" name="other_submit" class="btn">Save Expense Name</button>
        </form>
    </div>

    <!-- Add Expense Section -->
    <div class="section">
        <h3>Add Daily Expense</h3>
        <form method="post" id="expenseForm">
            {% csrf_token %}
            <div class="form-group">
                {{ expense_form.expenseType.label_tag }}
                {{ expense_form.expenseType }}
            </div>
            
            <div id="wagesNameField" class="form-group">
                {{ expense_form.wagesName.label_tag }}
                {{ expense_form.wagesName }}
                {% if expense_form.wagesName.errors %}
                    <div class="error-message">
                        {{ expense_form.wagesName.errors }}
                    </div>
                {% endif %}
            </div>

            <div id="otherExpensesNameField" class="form-group">
                {{ expense_form.otherExpensesName.label_tag }}
                {{ expense_form.otherExpensesName }}
                {% if expense_form.otherExpensesName.errors %}
                    <div class="error-message">
                        {{ expense_form.otherExpensesName.errors }}
                    </div>
                {% endif %}
            </div>

            <div class="form-group">
                {{ expense_form.amount.label_tag }}
                {{ expense_form.amount }}
                {% if expense_form.amount.errors %}
                    <div class="error-message">
                        {{ expense_form.amount.errors }}
                    </div>
                {% endif %}
            </div>

            <button type="submit" name="expense_submit" class="btn">Save Expense</button>
        </form>
    </div>

    <!-- Filter Section -->
    <div class="section">
        <h3>Filter Expenses</h3>
        <form method="get">
            <input type="date" name="start_date" class="form-control">
            <input type="date" name="end_date" class="form-control">
            <select name="expense_type" class="form-control">
                <option value="">All Types</option>
                <option value="wages">Wages</option>
                <option value="other">Other</option>
            </select>
            <button type="submit" class="btn">Filter</button>
            <a href="{% url 'charial_daily' %}" class="btn">Clear</a>
        </form>
    </div>

    <!-- Expenses Table -->
    <div class="section">
        <h3>Expenses Records</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Type</th>
                    <th>Name</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                {% for expense in expenses %}
                <tr>
                    <td>{{ expense.date }}</td>
                    <td>{{ expense.get_expenseType_display }}</td>
                    <td>{{ expense.get_name }}</td>
                    <td>{{ expense.amount }}</td>
                </tr>
                {% endfor %}
            </tbody>
            <tfoot>
                <tr>
                    <th colspan="3">Total</th>
                    <th>{{ total_amount }}</th>
                </tr>
            </tfoot>
        </table>
        <a href="{% url 'export_charial_daily' %}?{{ request.GET.urlencode }}" class="btn">Export to Excel</a>
    </div>

    <!-- Back Button -->
    <div style="margin-top: 20px;">
        <a href="{% url 'charial_main' %}" class="btn">Back to CHARIAL</a>
    </div>
</div>

<script>
function toggleExpenseType() {
    const expenseType = document.querySelector('[name="expenseType"]').value;
    document.getElementById('wagesNameField').style.display = expenseType === 'wages' ? 'block' : 'none';
    document.getElementById('otherExpensesNameField').style.display = expenseType === 'other' ? 'block' : 'none';
    
    // Reset fields when switching types
    if(expenseType !== 'wages') document.querySelector('[name="wagesName"]').value = '';
    if(expenseType !== 'other') document.querySelector('[name="otherExpensesName"]').value = '';
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    toggleExpenseType();
    
    // Add event listener for expense type change
    document.querySelector('[name="expenseType"]').addEventListener('change', toggleExpenseType);
});
</script>
{% endblock %}", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial\main.html is "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <div class="button-group">
        <a href="{% url 'charial_bill' %}" class="btn">CHARIAL BILL</a>
        <a href="{% url 'charial_daily' %}" class="btn">CHARIAL DAILY EXPENSES</a>
        <a href="{% url 'charial_trade' %}" class="btn">CHARIAL TRADE</a>
        <a href="{% url 'charial_balance' %}" class="btn">CHARIAL MONTHLY BALANCE SHEET</a>
    </div>
    <a href="{% url 'dashboard' %}" class="btn back">Back to Dashboard</a>
</div>
{% endblock %}", code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\charial\trade.html is : "{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>{{ heading }}</h1>
    <p>Current Date: {{ current_date }}</p>

    <!-- Add Seller Section -->
    <div class="section">
        <h3>Add New Seller</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ seller_form.name.label_tag }}
                {{ seller_form.name }}
                {% if seller_form.name.errors %}
                    <div class="error-message">
                        {{ seller_form.name.errors }}
                    </div>
                {% endif %}
            </div>
            <div class="form-group">
                {{ seller_form.pendingAmount.label_tag }}
                {{ seller_form.pendingAmount }}
            </div>
            <button type="submit" name="seller_submit" class="btn">Save Seller</button>
        </form>
    </div>

    <!-- Add Trade Section -->
    <div class="section">
        <h3>Add Daily Trade</h3>
        <form method="post">
            {% csrf_token %}
            <div class="form-group">
                {{ trade_form.seller.label_tag }}
                {{ trade_form.seller }}
            </div>
            <div class="form-group">
                {{ trade_form.todayPurchase.label_tag }}
                {{ trade_form.todayPurchase }}
            </div>
            <div class="form-group">
                {{ trade_form.amPayment.label_tag }}
                {{ trade_form.amPayment }}
            </div>
            <div class="form-group">
                {{ trade_form.pmPayment.label_tag }}
                {{ trade_form.pmPayment }}
            </div>
            <button type="submit" name="trade_submit" class="btn">Save Trade</button>
        </form>
    </div>

    {% comment %} <!-- Filter Section -->
    <div class="section">
        <h3>Filter Records</h3>
        <form method="get">
            <input type="date" name="start_date" class="form-control">
            <input type="date" name="end_date" class="form-control">
            <button type="submit" class="btn">Filter</button>
            <a href="{% url 'charial_trade' %}" class="btn">Clear</a>
        </form>
    </div> {% endcomment %}



    <!-- Filter Section -->
<div class="section">
    <h3>Filter Records</h3>
    <form method="get">
        <div class="filter-option">
            <label>
                <input type="checkbox" name="unique_names" 
                    {% if unique_names %}checked{% endif %}>
                Show Last Record per Seller
            </label>
        </div>
        <div class="date-filters">
            <input type="date" name="start_date" class="form-control">
            <input type="date" name="end_date" class="form-control">
        </div>
        <div class="filter-buttons">
            <button type="submit" class="btn">Apply Filters</button>
            <a href="{% url 'charial_trade' %}" class="btn">Clear All</a>
        </div>
    </form>
</div>

<style>
/* Add these styles to your existing CSS */
.filter-option {
    margin-bottom: 15px;
}

.filter-option label {
    display: flex;
    align-items: center;
    gap: 8px;
}

.date-filters {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
}

.filter-buttons {
    display: flex;
    gap: 10px;
    margin-top: 10px;
}

.form-control {
    padding: 6px 12px;
    border-radius: 4px;
    border: 1px solid #ddd;
}
</style>

    <!-- Trade Records Table -->
    <div class="section">
        <h3>Trade Records</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Seller</th>
                    <th>Purchase</th>
                    <th>AM Payment</th>
                    <th>PM Payment</th>
                    <th>New Pending</th>
                </tr>
            </thead>
            <tbody>
                {% for trade in trades %}
                <tr>
                    <td>{{ trade.date }}</td>
                    <td>{{ trade.seller.name }}</td>
                    <td>{{ trade.todayPurchase }}</td>
                    <td>{{ trade.amPayment }}</td>
                    <td>{{ trade.pmPayment }}</td>
                    <td>{{ trade.new_pending }}</td>
                </tr>
                {% endfor %}
            </tbody>
            <!-- Update the tfoot section -->
<tfoot>
    <tr>
        <th colspan="2">Totals</th>
        <th>{{ total_purchase }}</th>
        <th>{{ total_am }}</th>
        <th>{{ total_pm }}</th>
        <th>{{ total_new_pending }}</th>
    </tr>
</tfoot>
        </table>
        <a href="{% url 'export_charial_trade' %}?{{ request.GET.urlencode }}" 
   class="btn" 
   style="margin-top: 15px;">
   Export to Excel
</a>
    </div>

    <a href="{% url 'charial_main' %}" class="btn back">Back to CHARIAL</a>
</div>
{% endblock %}", now say me what will be the final code for C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat\balance_sheet.html, C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat\bill.html,C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat\daily_expenses.html, C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat\main.html, C:\Users\Soumyajit\Downloads\per1\core\accounts\templates\mahisgoat\trade.html so that i can do copy pest the complete code on that perticular position 
















































